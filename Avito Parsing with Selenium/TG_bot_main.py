import subprocess
import os
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import threading
import time

TOKEN = 'token'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_choices = {}  # –§–æ—Ä–º–∞—Ç: {user_id: {'rooms': X, 'line_index': Y, 'ads_lines': []}}
subscribers = {}  # –§–æ—Ä–º–∞—Ç: {user_id: rooms}


def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    if user_id not in user_choices:
        user_choices[user_id] = {'rooms': 1, 'line_index': 0, 'ads_lines': []}
    main_menu(update, context)


def main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    user_id = update.effective_user.id
    if user_id not in user_choices:
        user_choices[user_id] = {'rooms': 1, 'line_index': 0, 'ads_lines': []}

    text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–Ω—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ü–µ—Ä–º–∏\n\n"
        "–ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –ê–≤–∏—Ç–æ –±—ã—Å—Ç—Ä–æ –∏—Å—á–µ–∑–∞—é—Ç. –•–æ—Ä–æ—à–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–¥–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤—ã –æ –Ω–∏—Ö —É–∑–Ω–∞—ë—Ç–µ. "
        "–ù–æ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–∞ –ê–≤–∏—Ç–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. "
        "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –∏ –Ω–∞–∂–∞—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
        "\n–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: \n"
        "+ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –∏—â–µ–º –Ω–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫ (–±–µ–∑ –ø–æ—Å—É—Ç–æ—á–Ω—ã—Ö)\n"
        "+ –ì–æ—Ä–æ–¥: –ü–µ—Ä–º—å\n"
        "+ –†–∞–π–æ–Ω: –≤—Å–µ 7 —Ä–∞–π–æ–Ω–æ–≤\n"
        "+ –ê—Ä–µ–Ω–¥–∞–¥–∞—Ç–µ–ª–∏: —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–Ω—ã–µ\n"
        "+ –¢–∏–ø –∂–∏–ª—å—è: —Ç–æ–ª—å–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã)\n"
        "+ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)\n"
        "–≠—Ç–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å!\n"
        "\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ\n"
        "2. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –µ—Å—Ç—å –Ω–∞ –∞–≤–∏—Ç–æ\n"
        "3. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "\n–ê–≤—Ç–æ—Ä: @pasta159"
    )
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", callback_data='select_rooms')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='create_subscription')],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data='start_search')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='cancel_subscription')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=reply_markup)


def select_rooms(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç"""
    text = "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ."
    keyboard = [
        [InlineKeyboardButton("1 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data='room_1')],
        [InlineKeyboardButton("2 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data='room_2')],
        [InlineKeyboardButton("3 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data='room_3')],
        [InlineKeyboardButton("4 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data='room_4')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(text, reply_markup=reply_markup)


def set_rooms(update: Update, context: CallbackContext, rooms: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    if user_id not in user_choices:
        user_choices[user_id] = {'rooms': rooms, 'line_index': 0, 'ads_lines': []}
    else:
        user_choices[user_id]['rooms'] = rooms
        user_choices[user_id]['line_index'] = 0

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É")
    update.callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É")
    main_menu(update, context)


def start_search(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É"""
    user_id = update.effective_user.id
    if user_id not in user_choices:
        user_choices[user_id] = {'rooms': 1, 'line_index': 0}

    rooms = user_choices[user_id]['rooms']
    file_path = f'output_scripts_parsing/parsing_output_{rooms}k.txt'

    print(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")

    if not os.path.exists(file_path):
        update.callback_query.edit_message_text(
            f"–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return

    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    lines = [line.strip() for line in lines if line.strip()]
    user_choices[user_id]['ads_lines'] = lines
    user_choices[user_id]['line_index'] = 0
    show_next_block(update, context)


def show_next_block(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π (5 —à—Ç—É–∫)"""
    user_id = update.effective_user.id
    rooms = user_choices[user_id]['rooms']
    line_index = user_choices[user_id].get('line_index', 0)
    lines = user_choices[user_id].get('ads_lines', [])
    id_file = f'id_{rooms}k.json'

    # –ë–µ—Ä–µ–º –±–ª–æ–∫ –∏–∑ 40 —Å—Ç—Ä–æ–∫ (5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π * 8 —Å—Ç—Ä–æ–∫)
    next_block = lines[line_index:line_index + 40]

    try:
        with open(id_file, 'r', encoding='utf-8') as f:
            id_list = json.load(f)
    except:
        id_list = []

    ads = []
    current_ad = []
    ad_count = 0

    for line in next_block:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        if set(line.strip()) == {'-', ' '}:
            if current_ad:  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (6-—è —Å—Ç—Ä–æ–∫–∞)
                if len(current_ad) >= 6 and len(current_ad[5]) > 500:
                    current_ad[5] = current_ad[5][:497] + "..."

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                if ad_count < len(id_list):
                    current_ad.append(f"üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (https://avito.ru/{id_list[ad_count]})")
                    current_ad.append("- " * 50)
                ads.append('\n'.join(current_ad))
                current_ad = []
                ad_count += 1
            continue

        current_ad.append(line)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if current_ad and ad_count < len(id_list):
        if len(current_ad) >= 6 and len(current_ad[5]) > 500:
            current_ad[5] = current_ad[5][:497] + "..."

        current_ad.append(f"üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (https://avito.ru/{id_list[ad_count]})")
        if (line_index + 40) < len(lines):
            current_ad.append("-" * 50)
        ads.append('\n'.join(current_ad))

    final_text = f"<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É:</b> {rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è\n\n" + '\n\n'.join(ads)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    has_next = (line_index + 40) < len(lines)
    has_prev = line_index > 0

    if has_prev and has_next:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_block'),
                         InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data='next_block')])
    elif has_prev:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_block')])
    elif has_next:
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data='next_block')])

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(text=final_text[:4000], reply_markup=reply_markup, parse_mode='HTML')


def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    data = query.data

    if data == 'main_menu':
        main_menu(update, context)
    elif data == 'select_rooms':
        select_rooms(update, context)
    elif data == 'room_1':
        set_rooms(update, context, 1)
    elif data == 'room_2':
        set_rooms(update, context, 2)
    elif data == 'room_3':
        set_rooms(update, context, 3)
    elif data == 'room_4':
        set_rooms(update, context, 4)
    elif data == 'start_search':
        start_search(update, context)
    elif data == 'next_block':
        user_id = update.effective_user.id
        user_choices[user_id]['line_index'] += 40
        show_next_block(update, context)
    elif data == 'prev_block':
        user_id = update.effective_user.id
        user_choices[user_id]['line_index'] = max(user_choices[user_id]['line_index'] - 40, 0)
        show_next_block(update, context)
    elif data == 'create_subscription':
        handle_subscription(update, context)
    elif data == 'cancel_subscription':
        handle_unsubscribe(update, context)
    elif data == 'back_to_main':
        main_menu(update, context)


def handle_subscription(update: Update, context: CallbackContext):
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    rooms = user_choices.setdefault(user_id, {'rooms': 1}).get('rooms', 1)

    subscribers[user_id] = rooms
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã")

    context.bot.send_message(
        chat_id=user_id,
        text=f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–º.\n"
             f"–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç."
    )


def handle_unsubscribe(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    if user_id in subscribers:
        del subscribers[user_id]
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É")
        context.bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        context.bot.send_message(chat_id=user_id, text="‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")


def run_parsing_scripts():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
    scripts = [
        'Script_parsing_1k.py',
        'Script_parsing_2k.py',
        'Script_parsing_3k.py',
        'Script_parsing_4k.py'
    ]

    for script in scripts:
        try:
            print(f"–ó–∞–ø—É—Å–∫–∞–µ–º {script}...")
            result = subprocess.run(['python', script], check=True, capture_output=True, text=True)
            print(f"{script} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except subprocess.CalledProcessError as e:
            print(f"–û—à–∏–±–∫–∞ –≤ {script}: {e.stderr}")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script}: {e}")


def background_checker(bot):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
    time.sleep(180)

    # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    prev_first_lines = {1: None, 2: None, 3: None, 4: None}

    while True:
        print("\n=== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===")

        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        run_parsing_scripts()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä
        for rooms in range(1, 5):
            path = f'output_scripts_parsing/parsing_output_{rooms}k.txt'

            if os.path.exists(path):
                try:
                    with open(path, 'r', encoding='utf-8') as f:
                        current_first_line = f.readline().strip()

                        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if prev_first_lines[rooms] and current_first_line != prev_first_lines[rooms]:
                            print(f"–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã!")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                            for user_id, subscribed_rooms in subscribers.items():
                                if subscribed_rooms == rooms:
                                    try:
                                        bot.send_message(
                                            chat_id=user_id,
                                            text=f"üîî –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã!\n"
                                                 f"–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
                                        )
                                        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
                                    except Exception as e:
                                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        prev_first_lines[rooms] = current_first_line
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}")

        print("=== –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç ===")
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç


if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    threading.Thread(
        target=lambda: background_checker(Updater(TOKEN, use_context=True).bot),
        daemon=True
    ).start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    updater.idle()