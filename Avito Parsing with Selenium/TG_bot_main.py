import subprocess
import os
import json
import threading
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '8087040319:AAEVnet_HuhgndKneYaTgsH0HOWFPB1FdOU'

# –•—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
user_choices = {}
subscribers = {}
last_known_ids = {}

# –ö–æ–º–∞–Ω–¥–∞ /start

def start(update: Update, context: CallbackContext):
    main_menu(update, context)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

def main_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in user_choices:
        user_choices[user_id] = {'rooms': 1}

    text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–Ω—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ü–µ—Ä–º–∏\n\n"
        "–ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –ê–≤–∏—Ç–æ –±—ã—Å—Ç—Ä–æ –∏—Å—á–µ–∑–∞—é—Ç. –•–æ—Ä–æ—à–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–¥–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤—ã –æ –Ω–∏—Ö —É–∑–Ω–∞—ë—Ç–µ. "
        "–ù–æ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–∞ –ê–≤–∏—Ç–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
        "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –∏ –Ω–∞–∂–∞—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
        "–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: \n"
        "+ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –∏—â–µ–º –Ω–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫ (–±–µ–∑ –ø–æ—Å—É—Ç–æ—á–Ω—ã—Ö)\n"
        "+ –ì–æ—Ä–æ–¥: –ü–µ—Ä–º—å\n"
        "+ –†–∞–π–æ–Ω: –≤—Å–µ 7 —Ä–∞–π–æ–Ω–æ–≤\n"
        "+ –ê—Ä–µ–Ω–¥–∞–¥–∞—Ç–µ–ª–∏: —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–Ω—ã–µ\n"
        "+ –¢–∏–ø –∂–∏–ª—å—è: —Ç–æ–ª—å–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã)\n"
        "+ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)\n"
        "–≠—Ç–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å!\n"
        "\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ\n"
        "2. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –µ—Å—Ç—å –Ω–∞ –∞–≤–∏—Ç–æ\n"
        "3. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "\n–ê–≤—Ç–æ—Ä: @pasta159"
    )
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", callback_data='select_rooms')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='create_subscription')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='cancel_subscription')],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data='start_search')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=reply_markup)

# –í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç

def select_rooms(update: Update, context: CallbackContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ."
    keyboard = [
        [InlineKeyboardButton("1 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è + —Å—Ç—É–¥–∏–∏", callback_data='room_1')],
        [InlineKeyboardButton("2 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data='room_2')],
        [InlineKeyboardButton("3 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data='room_3')],
        [InlineKeyboardButton("4 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data='room_4')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(text, reply_markup=reply_markup)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç

def set_rooms(update: Update, context: CallbackContext, rooms: int):
    user_id = update.effective_user.id
    user_choices[user_id] = {'rooms': rooms}
    update.callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É")
    main_menu(update, context)

# –°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ ‚Äî —á–∏—Ç–∞–µ–º 40 —Å—Ç—Ä–æ–∫ (5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ 8 —Å—Ç—Ä–æ–∫)

def start_search(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    rooms = user_choices.get(user_id, {}).get('rooms', 1)

    file_path = f'output_scripts_parsing/parsing_output_{rooms}k.txt'
    id_path = f'id_{rooms}k.json'

    if not os.path.exists(file_path):
        update.callback_query.edit_message_text("–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(file_path, 'r', encoding='utf-8') as f:
        lines = [line.strip() for line in f.readlines() if line.strip() != '']

    with open(id_path, 'r', encoding='utf-8') as f:
        id_list = json.load(f)

    context.user_data['lines'] = lines
    context.user_data['ids'] = id_list
    context.user_data['index'] = 0

    show_ads(update, context)

def show_ads(update: Update, context: CallbackContext, previous=False):
    lines = context.user_data.get('lines', [])
    ids = context.user_data.get('ids', [])
    index = context.user_data.get('index', 0)

    if previous:
        index = max(0, index - 90)

    output_lines = lines[index:index + 50]
    ad_blocks = []
    ad_id_index = index // 8

    for i in range(0, len(output_lines), 8):
        ad_text = '\n'.join(output_lines[i:i + 7])
        link = f"https://avito.ru/{ids[ad_id_index]}" if ad_id_index < len(ids) else ""
        ad_blocks.append(f"{ad_text}\n\nüëâ <a href='{link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>")
        ad_id_index += 1

    if not ad_blocks:
        keyboard = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.callback_query.edit_message_text("–û–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=reply_markup)
        return

    final_text = '\n\n'.join(ad_blocks)
    if len(final_text) > 4000:
        final_text = final_text[:3990] + "‚Ä¶ (–æ–±—Ä–µ–∑–∞–Ω–æ)"

    buttons = []
    if index > 0:
        buttons.append(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data='show_previous'))
    if index + 50 < len(lines):
        buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ", callback_data='show_more'))
    buttons.append(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))

    context.user_data['index'] = index + 50
    reply_markup = InlineKeyboardMarkup([buttons])

    update.callback_query.edit_message_text(
        text=final_text,
        reply_markup=reply_markup,
        parse_mode='HTML',
        disable_web_page_preview=True
    )

# –ü–æ–¥–ø–∏—Å–∫–∞

def handle_subscription(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    rooms = user_choices.get(user_id, {}).get('rooms', 1)
    subscribers[user_id] = rooms
    context.bot.send_message(chat_id=user_id, text=f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–º.")

def handle_unsubscribe(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in subscribers:
        del subscribers[user_id]
        context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        context.bot.send_message(chat_id=user_id, text="–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫

def button_handler(update: Update, context: CallbackContext):
    data = update.callback_query.data
    if data == 'main_menu':
        main_menu(update, context)
    elif data == 'select_rooms':
        select_rooms(update, context)
    elif data.startswith('room_'):
        rooms = int(data.split('_')[1])
        set_rooms(update, context, rooms)
    elif data == 'start_search':
        start_search(update, context)
    elif data == 'show_more':
        show_ads(update, context)
    elif data == 'show_previous':
        show_ads(update, context, previous=True)
    elif data == 'create_subscription':
        handle_subscription(update, context)
    elif data == 'cancel_subscription':
        handle_unsubscribe(update, context)

# –§–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∞—Ä—Ç–∞ –≤ 3 –º–∏–Ω—É—Ç—ã

def run_parsing_scripts():
    scripts = [
        'Script_parsing_1k.py',
        'Script_parsing_2k.py',
        'Script_parsing_3k.py',
        'Script_parsing_4k.py',
    ]
    for script in scripts:
        try:
            subprocess.run(['python', script], check=True)
        except subprocess.CalledProcessError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script}: {e}")

    for rooms in [1, 2, 3, 4]:
        try:
            with open(f'id_{rooms}k.json', 'r', encoding='utf-8') as f:
                ids = json.load(f)
                last_known_ids[rooms] = ids[0] if ids else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ id_{rooms}k.json: {e}")

    for user_id, rooms in subscribers.items():
        try:
            with open(f'id_{rooms}k.json', 'r', encoding='utf-8') as f:
                current_ids = json.load(f)
                current_first = current_ids[0] if current_ids else None
                if current_first and current_first != last_known_ids.get(rooms):
                    context_bot.send_message(chat_id=user_id, text=f"üîî –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–º! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# –ü–æ—Ç–æ–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

def background_runner():
    print("–ñ–¥—ë–º 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    time.sleep(180)
    while True:
        print("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥-—Å–∫—Ä–∏–ø—Ç–æ–≤...")
        run_parsing_scripts()
        time.sleep(600)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

def main():
    global context_bot
    updater = Updater(TOKEN, use_context=True)
    context_bot = updater.bot
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    threading.Thread(target=background_runner, daemon=True).start()
    main()
